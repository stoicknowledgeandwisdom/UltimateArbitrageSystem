{
  "options": {
    "config_plugin": "filesystem",
    "logger_plugin": "filesystem",
    "logger_path": "/var/log/osquery",
    "disable_logging": "false",
    "log_result_events": "true",
    "schedule_splay_percent": "10",
    "pidfile": "/var/osquery/osquery.pidfile",
    "events_expiry": "3600",
    "database_path": "/var/osquery/osquery.db",
    "verbose": "false",
    "worker_threads": "2",
    "enable_monitor": "true",
    "disable_events": "false",
    "disable_audit": "false",
    "audit_allow_config": "true",
    "host_identifier": "hostname",
    "enable_syslog": "true",
    "syslog_pipe_path": "/var/osquery/syslog_pipe",
    "force": "true",
    "disable_watchdog": "false",
    "watchdog_level": "1",
    "watchdog_memory_limit": "250",
    "watchdog_utilization_limit": "60"
  },
  "schedule": {
    "system_info": {
      "query": "SELECT hostname, cpu_brand, physical_memory FROM system_info;",
      "interval": 3600
    },
    "osquery_info": {
      "query": "SELECT i.*, p.resident_size, p.user_time, p.system_time, time.minutes as counter FROM osquery_info i, processes p, time WHERE p.pid = i.pid;",
      "interval": 600
    },
    "network_connections": {
      "query": "SELECT pid, family, protocol, local_address, local_port, remote_address, remote_port, path FROM process_open_sockets WHERE path != '' OR remote_address != '';",
      "interval": 60
    },
    "listening_ports": {
      "query": "SELECT pid, family, protocol, local_address, local_port, path FROM listening_ports;",
      "interval": 300
    },
    "process_events": {
      "query": "SELECT pid, path, cmdline, cwd, root, uid, gid, euid, egid, suid, sgid, on_disk, wired_size, resident_size, total_size, user_time, system_time, disk_bytes_read, disk_bytes_written, start_time, parent, pgroup, threads, nice, is_elevated_token FROM processes;",
      "interval": 60
    },
    "file_events": {
      "query": "SELECT target_path, category, time, action FROM file_events WHERE category = 'created' OR category = 'modified' OR category = 'deleted';",
      "interval": 30
    },
    "trading_process_monitoring": {
      "query": "SELECT pid, name, path, cmdline, cwd, uid, gid, parent, start_time, resident_size, user_time, system_time FROM processes WHERE name LIKE '%arbitrage%' OR name LIKE '%trading%' OR name LIKE '%portfolio%' OR cmdline LIKE '%python%' AND cmdline LIKE '%trade%';",
      "interval": 30
    },
    "suspicious_network_activity": {
      "query": "SELECT pos.pid, pos.local_address, pos.local_port, pos.remote_address, pos.remote_port, p.name, p.path, p.cmdline FROM process_open_sockets pos JOIN processes p ON pos.pid = p.pid WHERE pos.remote_port IN (6667, 6668, 6669, 7000, 31337, 54321) OR pos.remote_address LIKE '%.onion' OR pos.remote_address IN (SELECT address FROM known_bad_ips);",
      "interval": 60
    },
    "user_events": {
      "query": "SELECT uid, gid, username, description, directory, shell FROM users;",
      "interval": 3600
    },
    "login_events": {
      "query": "SELECT username, tty, host, time, type FROM last;",
      "interval": 300
    },
    "system_controls": {
      "query": "SELECT * FROM kernel_info;",
      "interval": 3600
    },
    "installed_applications": {
      "query": "SELECT name, version, install_time FROM programs;",
      "interval": 3600
    },
    "startup_items": {
      "query": "SELECT name, path, args, type, source FROM startup_items;",
      "interval": 3600
    },
    "crontab_events": {
      "query": "SELECT command, path, minute, hour, day_of_month, month, day_of_week FROM crontab;",
      "interval": 3600
    },
    "kernel_modules": {
      "query": "SELECT name, size, used_by, status, address FROM kernel_modules;",
      "interval": 3600
    },
    "hardware_events": {
      "query": "SELECT device, model, serial, size, type FROM block_devices;",
      "interval": 3600
    },
    "memory_map": {
      "query": "SELECT pid, start, end, permissions, offset, device, inode, path FROM process_memory_map WHERE path != '';",
      "interval": 300
    },
    "open_files": {
      "query": "SELECT pid, fd, path FROM process_open_files WHERE path NOT LIKE '/proc/%' AND path NOT LIKE '/dev/%' AND path NOT LIKE '/sys/%';",
      "interval": 300
    },
    "environment_variables": {
      "query": "SELECT pid, key, value FROM process_envs WHERE key LIKE '%API%' OR key LIKE '%SECRET%' OR key LIKE '%TOKEN%' OR key LIKE '%PASSWORD%';",
      "interval": 600
    },
    "docker_containers": {
      "query": "SELECT id, name, image, image_id, command, created, state, status FROM docker_containers;",
      "interval": 300
    },
    "docker_images": {
      "query": "SELECT id, created, size_bytes, tags FROM docker_images;",
      "interval": 3600
    },
    "system_events": {
      "query": "SELECT action, path, auid, uid, euid, gid, egid, mode, cmdline FROM process_events;",
      "interval": 60
    },
    "socket_events": {
      "query": "SELECT action, pid, path, auid, success FROM socket_events;",
      "interval": 60
    },
    "file_integrity_monitoring": {
      "query": "SELECT target_path, category, time, action, transaction_id, md5, sha1, sha256 FROM file_events WHERE target_path LIKE '/etc/%' OR target_path LIKE '/usr/bin/%' OR target_path LIKE '/usr/sbin/%' OR target_path LIKE '/bin/%' OR target_path LIKE '/sbin/%';",
      "interval": 300
    },
    "trading_config_monitoring": {
      "query": "SELECT target_path, category, time, action FROM file_events WHERE target_path LIKE '%/config/%' OR target_path LIKE '%.conf' OR target_path LIKE '%.cfg' OR target_path LIKE '%.ini' OR target_path LIKE '%.yaml' OR target_path LIKE '%.yml' OR target_path LIKE '%.json';",
      "interval": 60
    },
    "security_software": {
      "query": "SELECT name, version, install_time FROM programs WHERE name LIKE '%antivirus%' OR name LIKE '%firewall%' OR name LIKE '%security%';",
      "interval": 3600
    },
    "usb_devices": {
      "query": "SELECT vendor, model, serial, removable FROM usb_devices;",
      "interval": 300
    },
    "certificates": {
      "query": "SELECT common_name, subject, issuer, self_signed, not_valid_before, not_valid_after, key_algorithm, key_strength, key_usage FROM certificates WHERE path LIKE '/etc/ssl/%' OR path LIKE '/usr/share/ca-certificates/%';",
      "interval": 3600
    },
    "python_packages": {
      "query": "SELECT name, version, summary, author FROM python_packages;",
      "interval": 3600
    },
    "npm_packages": {
      "query": "SELECT name, version, description, author FROM npm_packages;",
      "interval": 3600
    }
  },
  "decorators": {
    "load": [
      "SELECT uuid AS host_uuid FROM system_info;",
      "SELECT user AS username FROM logged_in_users ORDER BY time DESC LIMIT 1;"
    ],
    "always": [
      "SELECT user AS username FROM logged_in_users WHERE user <> '' ORDER BY time DESC LIMIT 1;"
    ],
    "interval": {
      "3600": [
        "SELECT total_seconds AS uptime FROM uptime;"
      ]
    }
  },
  "packs": {
    "osquery-monitoring": "/usr/share/osquery/packs/osquery-monitoring.conf",
    "incident-response": "/usr/share/osquery/packs/incident-response.conf",
    "it-compliance": "/usr/share/osquery/packs/it-compliance.conf",
    "vuln-management": "/usr/share/osquery/packs/vuln-management.conf",
    "hardware-monitoring": "/usr/share/osquery/packs/hardware-monitoring.conf"
  },
  "file_paths": {
    "trading_configs": [
      "/app/config/%%",
      "/etc/arbitrage/%%",
      "/opt/trading/%%"
    ],
    "system_binaries": [
      "/usr/bin/%%",
      "/usr/sbin/%%",
      "/bin/%%",
      "/sbin/%%"
    ],
    "system_configs": [
      "/etc/%%"
    ],
    "user_configs": [
      "/home/%/.ssh/%%",
      "/home/%/.config/%%",
      "/root/.ssh/%%"
    ],
    "logs": [
      "/var/log/%%",
      "/app/logs/%%"
    ]
  },
  "exclude_paths": {
    "trading_configs": [
      "/app/config/temp/%%",
      "/app/config/cache/%%"
    ],
    "system_binaries": [
      "/usr/bin/vmware-%%"
    ]
  },
  "events": {
    "disable_subscribers": [
      "user_events"
    ]
  },
  "yara": {
    "signatures": "/usr/share/osquery/yara/%%"
  }
}

