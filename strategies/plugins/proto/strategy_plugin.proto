syntax = "proto3";

package trading_strategy;

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

option go_package = "./proto";

// Strategy Plugin Service Definition
service StrategyPlugin {
    // Pre-trade validation and position sizing
    rpc PreTrade(PreTradeRequest) returns (PreTradeResponse);
    
    // Post-trade analysis and reporting
    rpc PostTrade(PostTradeRequest) returns (PostTradeResponse);
    
    // Real-time market data processing
    rpc OnMarketData(MarketDataEvent) returns (MarketDataResponse);
    
    // Risk validation before execution
    rpc RiskCheck(RiskCheckRequest) returns (RiskCheckResponse);
    
    // Strategy lifecycle management
    rpc Initialize(InitializeRequest) returns (InitializeResponse);
    rpc Configure(ConfigureRequest) returns (ConfigureResponse);
    rpc Start(StartRequest) returns (StartResponse);
    rpc Stop(StopRequest) returns (StopResponse);
    rpc GetStatus(StatusRequest) returns (StatusResponse);
    
    // Performance metrics and health checks
    rpc GetMetrics(MetricsRequest) returns (MetricsResponse);
    rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
    
    // Hot-swapping and versioning
    rpc UpdateStrategy(UpdateStrategyRequest) returns (UpdateStrategyResponse);
}

// Common data structures
message Decimal {
    string value = 1;
}

message Price {
    Decimal amount = 1;
    string currency = 2;
}

message Position {
    string symbol = 1;
    Decimal quantity = 2;
    Decimal average_price = 3;
    string side = 4; // "long" or "short"
    google.protobuf.Timestamp entry_time = 5;
    map<string, string> metadata = 6;
}

message MarketData {
    string symbol = 1;
    string exchange = 2;
    Decimal bid = 3;
    Decimal ask = 4;
    Decimal volume = 5;
    google.protobuf.Timestamp timestamp = 6;
    map<string, Decimal> extended_data = 7; // For funding rates, IV, etc.
}

message Greeks {
    Decimal delta = 1;
    Decimal gamma = 2;
    Decimal theta = 3;
    Decimal vega = 4;
    Decimal rho = 5;
}

// Pre-trade request and response
message PreTradeRequest {
    string strategy_id = 1;
    string opportunity_id = 2;
    StrategyType strategy_type = 3;
    repeated MarketData market_data = 4;
    repeated Position current_positions = 5;
    Decimal available_capital = 6;
    map<string, google.protobuf.Any> parameters = 7;
    google.protobuf.Timestamp timestamp = 8;
}

message PreTradeResponse {
    bool should_execute = 1;
    Decimal position_size = 2;
    repeated TradingAction actions = 3;
    Decimal expected_profit = 4;
    Decimal confidence_score = 5;
    RiskMetrics risk_metrics = 6;
    string reasoning = 7;
    map<string, google.protobuf.Any> metadata = 8;
}

// Post-trade request and response
message PostTradeRequest {
    string strategy_id = 1;
    string execution_id = 2;
    repeated ExecutedTrade trades = 3;
    Decimal realized_pnl = 4;
    Decimal fees_paid = 5;
    google.protobuf.Timestamp execution_time = 6;
    bool success = 7;
    string error_message = 8;
}

message PostTradeResponse {
    PnLAttribution pnl_attribution = 1;
    Greeks greeks = 2;
    VaRMetrics var_metrics = 3;
    repeated Insight insights = 4;
    map<string, Decimal> performance_metrics = 5;
}

// Market data event and response
message MarketDataEvent {
    repeated MarketData data = 1;
    google.protobuf.Timestamp timestamp = 2;
    string event_type = 3; // "tick", "book_update", "trade", etc.
}

message MarketDataResponse {
    repeated Signal signals = 1;
    repeated Opportunity opportunities = 2;
    bool state_changed = 3;
    map<string, google.protobuf.Any> state_data = 4;
}

// Risk check request and response
message RiskCheckRequest {
    string strategy_id = 1;
    repeated TradingAction proposed_actions = 2;
    repeated Position current_positions = 3;
    Decimal portfolio_value = 4;
    RiskLimits risk_limits = 5;
    map<string, Decimal> current_exposures = 6;
}

message RiskCheckResponse {
    bool approved = 1;
    repeated RiskViolation violations = 2;
    Decimal max_position_size = 3;
    repeated string recommendations = 4;
    RiskMetrics projected_risk = 5;
}

// Strategy lifecycle messages
message InitializeRequest {
    string strategy_id = 1;
    map<string, google.protobuf.Any> config = 2;
    repeated string exchanges = 3;
    repeated string symbols = 4;
}

message InitializeResponse {
    bool success = 1;
    string message = 2;
    map<string, google.protobuf.Any> initialization_data = 3;
}

message ConfigureRequest {
    string strategy_id = 1;
    map<string, google.protobuf.Any> config_updates = 2;
    bool hot_reload = 3;
}

message ConfigureResponse {
    bool success = 1;
    string message = 2;
    map<string, google.protobuf.Any> applied_config = 3;
}

message StartRequest {
    string strategy_id = 1;
    ExecutionMode mode = 2;
    map<string, google.protobuf.Any> runtime_params = 3;
}

message StartResponse {
    bool success = 1;
    string message = 2;
    google.protobuf.Timestamp started_at = 3;
}

message StopRequest {
    string strategy_id = 1;
    bool force = 2;
    string reason = 3;
}

message StopResponse {
    bool success = 1;
    string message = 2;
    google.protobuf.Timestamp stopped_at = 3;
    FinalMetrics final_metrics = 4;
}

message StatusRequest {
    string strategy_id = 1;
}

message StatusResponse {
    StrategyStatus status = 1;
    google.protobuf.Timestamp last_update = 2;
    map<string, google.protobuf.Any> status_data = 3;
    repeated string active_operations = 4;
}

// Metrics and health check
message MetricsRequest {
    string strategy_id = 1;
    google.protobuf.Timestamp from_time = 2;
    google.protobuf.Timestamp to_time = 3;
}

message MetricsResponse {
    PerformanceMetrics performance = 1;
    RiskMetrics risk = 2;
    map<string, Decimal> custom_metrics = 3;
}

message HealthCheckRequest {
    string strategy_id = 1;
}

message HealthCheckResponse {
    HealthStatus status = 1;
    repeated string issues = 2;
    map<string, string> diagnostics = 3;
}

// Hot-swapping
message UpdateStrategyRequest {
    string strategy_id = 1;
    string new_version = 2;
    bytes strategy_package = 3;
    bytes signature = 4;
    bool preserve_state = 5;
}

message UpdateStrategyResponse {
    bool success = 1;
    string message = 2;
    string active_version = 3;
    google.protobuf.Timestamp updated_at = 4;
}

// Supporting data structures
message TradingAction {
    string action_type = 1; // "buy", "sell", "close", "hedge"
    string symbol = 2;
    string exchange = 3;
    Decimal quantity = 4;
    Decimal price = 5;
    string order_type = 6; // "market", "limit", "stop"
    map<string, string> parameters = 7;
    int32 priority = 8;
}

message ExecutedTrade {
    string trade_id = 1;
    TradingAction original_action = 2;
    Decimal executed_quantity = 3;
    Decimal executed_price = 4;
    Decimal fees = 5;
    google.protobuf.Timestamp execution_time = 6;
    string exchange_order_id = 7;
    map<string, string> metadata = 8;
}

message RiskMetrics {
    Decimal var_1d = 1;
    Decimal var_5d = 2;
    Decimal expected_shortfall = 3;
    Decimal max_drawdown = 4;
    Decimal volatility = 5;
    Decimal beta = 6;
    Decimal sharpe_ratio = 7;
    map<string, Decimal> sector_exposure = 8;
    map<string, Decimal> currency_exposure = 9;
}

message RiskLimits {
    Decimal max_position_size = 1;
    Decimal max_daily_loss = 2;
    Decimal max_drawdown = 3;
    Decimal max_concentration = 4;
    Decimal max_leverage = 5;
    map<string, Decimal> custom_limits = 6;
}

message RiskViolation {
    string rule = 1;
    string severity = 2; // "warning", "error", "critical"
    string description = 3;
    Decimal current_value = 4;
    Decimal limit_value = 5;
    repeated string suggested_actions = 6;
}

message PnLAttribution {
    Decimal market_pnl = 1;
    Decimal execution_pnl = 2;
    Decimal fees_pnl = 3;
    Decimal slippage_pnl = 4;
    Decimal timing_pnl = 5;
    map<string, Decimal> factor_attribution = 6;
}

message VaRMetrics {
    Decimal current_var = 1;
    Decimal marginal_var = 2;
    Decimal incremental_var = 3;
    Decimal component_var = 4;
    repeated ScenarioResult scenario_results = 5;
}

message ScenarioResult {
    string scenario_name = 1;
    Decimal pnl_impact = 2;
    Decimal probability = 3;
    map<string, Decimal> factor_shocks = 4;
}

message Signal {
    string signal_type = 1;
    string symbol = 2;
    Decimal strength = 3;
    Decimal confidence = 4;
    google.protobuf.Timestamp timestamp = 5;
    map<string, google.protobuf.Any> metadata = 6;
}

message Opportunity {
    string opportunity_id = 1;
    StrategyType strategy_type = 2;
    repeated string symbols = 3;
    repeated string exchanges = 4;
    Decimal expected_profit = 5;
    Decimal confidence = 6;
    Decimal required_capital = 7;
    google.protobuf.Timestamp expiry = 8;
    map<string, google.protobuf.Any> details = 9;
}

message Insight {
    string insight_type = 1;
    string description = 2;
    Decimal impact_score = 3;
    repeated string actionable_items = 4;
    map<string, google.protobuf.Any> data = 5;
}

message PerformanceMetrics {
    Decimal total_pnl = 1;
    Decimal realized_pnl = 2;
    Decimal unrealized_pnl = 3;
    Decimal total_fees = 4;
    Decimal win_rate = 5;
    Decimal sharpe_ratio = 6;
    Decimal sortino_ratio = 7;
    Decimal max_drawdown = 8;
    int64 total_trades = 9;
    Decimal average_trade_pnl = 10;
}

message FinalMetrics {
    PerformanceMetrics performance = 1;
    RiskMetrics risk = 2;
    int64 total_runtime_seconds = 3;
    map<string, Decimal> summary_stats = 4;
}

// Enums
enum StrategyType {
    STRATEGY_TYPE_UNSPECIFIED = 0;
    TRIANGULAR_ARBITRAGE = 1;
    CROSS_EXCHANGE_ARBITRAGE = 2;
    FUNDING_RATE_CAPTURE = 3;
    OPTIONS_IV_ARBITRAGE = 4;
    MEV_ARBITRAGE = 5;
    STATISTICAL_ARBITRAGE = 6;
    MOMENTUM_TRADING = 7;
    MEAN_REVERSION = 8;
    MARKET_MAKING = 9;
    GRID_TRADING = 10;
}

enum ExecutionMode {
    EXECUTION_MODE_UNSPECIFIED = 0;
    SIMULATION = 1;
    BACKTEST = 2;
    PAPER_TRADING = 3;
    LIVE_TRADING = 4;
}

enum StrategyStatus {
    STRATEGY_STATUS_UNSPECIFIED = 0;
    IDLE = 1;
    INITIALIZING = 2;
    RUNNING = 3;
    PAUSED = 4;
    ERROR = 5;
    STOPPED = 6;
    UPDATING = 7;
}

enum HealthStatus {
    HEALTH_STATUS_UNSPECIFIED = 0;
    HEALTHY = 1;
    DEGRADED = 2;
    UNHEALTHY = 3;
    CRITICAL = 4;
}

